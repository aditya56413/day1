// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;
class Node{
    public:
    int data;
    Node* next;
    //constructor
    Node(int data){
        this->data=data;
        this->next=NULL;
    }
    //destructor
    ~Node(){
        int val=this->data;
        //memory free kar do
        if(this->next!=NULL){
            delete next;
            this->next=NULL;
        }
        cout<<"memory free for node with data "<<val<<endl;
    }
};

void insertAtHead(Node* &head,int d){
    //create new node
    Node* temp=new Node(d);
    temp->next=head;
    head=temp;
}

void insertAtTail(Node* &tail,int d){
    Node* temp=new Node(d);
    tail->next=temp;
    tail=tail->next;    
}

void insertAtPosition(Node* &tail,Node* &head,int pos, int d){
    if(pos==1){
        insertAtHead(head,d);
        return;
    }
    Node* temp=head;
    int count=1;
    while(count<pos-1){
        temp=temp->next;
        count++;
    }
    //inserting at last position
    if(temp->next==NULL){
        insertAtTail(tail,d);
        return;
    }
    //creating node for d
    Node* nodeToInsert=new Node(d);
    nodeToInsert->next=temp->next;
    temp->next=nodeToInsert;
}

void deleteNode(int pos,Node* &head){
    if(pos==1){
        Node* temp=head;
        head=head->next;
        //memory free kar do
        temp->next=NULL;
        delete temp;
    }
    else{
        //deleting middle node or last node
        Node* curr=head;
        Node* prev=NULL;
        int count=1;
        while(count<pos){
            prev=curr;
            curr=curr->next;
            count++;
        }
        prev->next=curr->next;
        curr->next=NULL;
        delete curr;
    }
}

void print(Node* &head){
    Node* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }cout<<endl;
}

int main() {
    // Created a new node
    Node* node1=new Node(10);
    // cout<<node1->data<<endl;
    // cout<<node1->next<<endl;
    
    //head pointing to node1
    Node* head=node1;
    Node* tail=node1;
    print(head);
    insertAtTail(tail,12);
    print(head);
    insertAtTail(tail,15);
    print(head);
    insertAtPosition(tail,head,2,22);
    print(head);
    insertAtPosition(tail,head,1,59);
    print(head);
    deleteNode(2,head);
    print(head);
    return 0;
}
