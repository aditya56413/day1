// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;
class Node{
    public:
    int data;
    Node* next;
    //constructor
    Node(int data){
        this->data=data;
        this->next=NULL;
    }
    ~Node(){
        // int value=this->data;
        if(this->next !=NULL){
            delete next;
            next=NULL;
        }
        // cout<<value<<" ki memory free kar diya.";
    }
};

void insertNode(Node* &tail,int element,int d){
    //element is present in the list
    //empty list
    if(tail==NULL){
        Node* newNode=new Node(d);
        tail=newNode;
        newNode->next=newNode;
    }
    //non-empty list
    // assuming that element is present in the list
    else{
        Node* curr=tail;
        while(curr->data !=element){
            curr=curr->next;
        }
        //element found
        Node* temp=new Node(d);
        temp->next=curr->next;
        curr->next=temp;
    }
}
void print(Node* tail){
    Node* temp=tail;
    //empty list
    if(tail==NULL){
        cout<<"List is empty "<<endl;
    }
    do{
        cout<<tail->data<<" ";
        tail=tail->next;
    }
    while(tail!=temp);
    cout<<endl;
}

void deleteNode(Node* &tail,int value){
    //empty list
    if(tail==NULL){
        cout<<"List is empty"<<endl;
        return;
    }else{
        //non-empty list
        Node* prev=tail;
        Node* curr=prev->next;
        while(curr->data !=value){
            prev=curr;
            curr=curr->next;
        }
        prev->next=curr->next;
        //1 node LL
        if(curr==prev){
            tail=NULL;
        }
        //2 node LL
        else if(tail==curr){
            tail=prev;
        }
        curr->next=NULL;
        delete curr;
    }
}
int main() {
    Node* tail=NULL;
    insertNode(tail,101,3);
    print(tail);
    insertNode(tail,3,5);
    print(tail);
    insertNode(tail,5,7);
    print(tail);
    insertNode(tail,7,9);
    print(tail);
    insertNode(tail,5,6);
    print(tail);
    insertNode(tail,9,10);
    print(tail);
    insertNode(tail,3,4);
    print(tail);
    deleteNode(tail,3);
    print(tail);
    deleteNode(tail,9);
    print(tail);
    deleteNode(tail,5);
    print(tail);
    deleteNode(tail,4);
    print(tail);
    deleteNode(tail,6);
    print(tail);
    deleteNode(tail,7);
    print(tail);
    deleteNode(tail,10);
    print(tail);
    return 0;
}



//
