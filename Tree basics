#include <iostream>
using namespace std;

class node{
    public:
    int data;
    node* left;
    node* right;
    //constructor
    node(int d){
        data=d;
        left=NULL;
        right=NULL;
    }
};
node* buildtree(){
    int d;
    cin>>d;
    if(d==-1){
        return NULL;
    }
    node* root=new node(d);
    root->left=buildtree();
    root->right=buildtree();
    return root;
}
void print (node* root){
    if(root==NULL){
        return ;
    }
    cout<<root->data<<" ";
    print(root->left);
    print(root->right);
}

void preorder(node* root){
    if(root==NULL){
        return;
    }
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
}
void postorder(node* root){
    if(root==NULL){
        return;
    }
    postorder(root->left);
    postorder(root->right);
    cout<<root->data<<" ";
}
void inorder(node* root){
    if(root==NULL){
        return;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}

int height(node* root){
    if(root==NULL){
        return 0;
    }
    return 1+max(height(root->left),height(root->right))
}

void level(int dis ,node* root){
    if(dis==0){
        cout<<root->data<<" ";
        return;
    }
    if(root->left){level(dis-1,root->left);}
    if(root->right){level(dis-1,root->right);}
}

void bfs(node* root){
    queue<node*>q;
    q.push(root);
    while(!q.empty()){
        int n=q.size();
        for(int i=0;i<n;i++){
        node* cur=q.front();
        q.pop();
        if(cur==NULL){
            continue;
        }
        cout<<cur->data<<" ";
        q.push(cur->left);
        q.push(cur->right);
        }
        cout<<"\n";
    }
}

void bfs2(node* root){
    queue<node*>q;
    q.push(root);
    while(!q.empty()){
        node* cur=q.front();
        q.pop();
        if(cur==NULL){
            continue;
        }
        cout<<cur->data<<" ";
        q.push(cur->left);
        q.push(cur->right);
    }
}

int countnodes(node* root){
    if(root==NULL){
        return 0;
    }
    return 1+countnodes(nodes->left)+countnodes(nodes->right);
}

int sumnodes(node* root){
    if(root==NULL){
        return 0;
    }
    return root->data+sumnodes(root->left)+sumnodes(root->right);
}

int countleaf(node* root){
    if(root==NULL){
        return 0;
    }
    if(root->left==NULL && root->right==NULL){
        return 1;
    }
    return countleaf(root->left)+countleaf(root->right);
}
int main() {
    node* root=buildtree();
    print(root);
    cout<<"\n";
    preorder(root);
    cout<<"\n";
    postorder(root);
    cout<<"\n";
    inorder(root);
    cout<<"\n";
    int h=height(root);
    for(int i=0;i<h;i++){
        level(i,root);
        cout<<"\n";
    }
bfs(root);
bfs2(root);
  cout<<sumnodes(root)<<"\n"<<countnodes(root)<<"\n"<<countleaf(root);
    return 0;
}
