//Selection sort:-
    //smallest element ko right jegah pe rakh dena hai
    //n=5 ,round=n-1
    //T.C=O(n^2)
    //S.C=O(1)
    //Best case     Worst case
    //O(n^2)          O(n^2)
    //use: when size of array/vector is small then we can use selection sort.

void selectionSort(vector<int>&arr,int n){
    for(int i=0;i<n-1;i++){
        int minIndex=i;
        for(int j=i+1;j<n;j++){
            if(arr[j]<arr[minIndex]){
                minIndex=j;
            }
        }swap(arr[minIndex],arr[i]);
    }
}


//Bubble sort:-
    //i th round mme ith largest element ko right place mme pahucha dete hai
    //n=5 ,round=n-1
    //T.C=O(n^2)
    //S.C=O(1)
    //Best case     Worst case
    //O(n)          O(n^2)
    
void bubbleSort(vector<int>&arr,int n){
    //i=0 ------- <n-1
    //j=0 ------- <n-i-1
    for(int i=1;i<n;i++){
        bool swapped=false;
        for(int j=0;j<n-i;j++){
            if(arr[j]>arr[j+1]){
                swap(arr[j],arr[j+1]);
                swapped=true;
            }
        }if(swapped==false){
            //already sorted
            break;
        }
    }
}


//Insertion sort:-
    //bestcase->O(n)
    //worst case->O(n^2)
    //remember this by cards example
    //T.C=O(n^2)
    //S.C=O(1)

    void insertionSort(vector <int>&arr,int n){
        for(int i=1;i<n;i++){
            int temp=arr[i];
            int j=i-1;
            for(;j>=0;j--){
                if(arr[j]>temp){
                    //shift
                    arr[j+1]=arr[j];
                }
                else{//nikal jao
                    break;
                }
            }
            arr[j+1]=temp;
        }
    }


//Merge sort
    //
